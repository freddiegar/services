#!/bin/sh

# Run checker user before continue
# @thanks https://victoria.dev/blog/an-automatic-interactive-pre-commit-checklist-in-the-style-of-infomercials/
echo -n "Do you want commit on [\e[90m${PWD##*/}\e[0m] as \e[1;32m`git config --get user.name`\e[0m? (s/y/N): "

exec < /dev/tty

read RESPONSE

if [ "$RESPONSE" = "s" ]; then
    echo "\e[34mVerify skipped\e[0m"

    exit 0
elif [ "$RESPONSE" != "y" ]; then
    echo "\e[31mCommit aborted!\e[0m"

    exit 1
fi

exec <&-

REPO=${PWD##*/}
FSTAGING=`git ls-files --modified | grepx ".php$" | wc -l`
FMODIFING=`git diff --name-only --cached | xargs -r -l echo | grepx ".php$" | wc -l`
FCOMPOSER=`git diff --name-only --cached | xargs -r -l echo | grepx "composer.[json|lock]" | wc -l`
FPHP=$(($FSTAGING + $FMODIFING + $FCOMPOSER))

phpx /usr/local/bin/composer validate --no-check-all --strict || exit $?

if [ "$REPO" != "rest-services" ]; then
    COMPOSER_AUDIT_ABANDONED=ignore phpx /usr/local/bin/composer audit || exit $?
fi

# Run fixer before add message to commit
if [ $FPHP = 0 ]; then
    echo -n ""
elif [ -f .php_cs ]; then
    phpx vendor/bin/php-cs-fixer fix --config=.php_cs -v || exit $?
elif [ -f .php-cs-fixer.php ]; then
    phpx vendor/bin/php-cs-fixer fix --config=.php-cs-fixer.php -v || exit $?
elif [ -f .phpcs.xml ]; then
    phpx vendor/bin/phpcbf --colors -s --standard=.phpcs.xml || exit $?
else
    echo "\e[31mFixer not found.\e[0m"
fi

if [ "$REPO" != "microsites" ]; then
if [ $FPHP = 0 ]; then
    echo -n ""
elif [ -f phpstan.neon.dist ] && [ -f vendor/bin/phpstan ]; then
    phpx vendor/bin/phpstan analyse || exit $?
elif [ -f phpstan.neon ] && [ -f vendor/bin/phpstan ]; then
    phpx vendor/bin/phpstan analyse -c phpstan.neon || exit $?
# else
#     echo "\e[31mLarastan not found.\e[0m"
fi
fi

if [ $FPHP = 0 ]; then
    exit 0
fi

# Cherry picks not allowed skip testing
# exit 0

COMMAND=""

# Run test before add message to commit
if [ "`phpx /usr/local/bin/composer list | grepx -F '  test-ci  '`" != "" ] && [ "`jq '.scripts."test-ci"' composer.json | grepx -v 'pcov'`" != "" ]; then
    COMMAND="$(jq '.scripts."test-ci"' composer.json | sed 's/\"//g')"
elif [ "`phpx /usr/local/bin/composer list | grepx -F '  phpunit-ci  '`" != "" ]; then
    COMMAND="$(jq '.scripts."phpunit-ci"' composer.json | sed 's/\"//g')"
elif [ "`phpx /usr/local/bin/composer list | grepx -F '  phpunit  '`" != "" ]; then
    COMMAND="$(jq '.scripts."phpunit"' composer.json | sed 's/\"//g')"
elif [ "`phpx /usr/local/bin/composer list | grepx -F '  test  '`" != "" ]; then
    COMMAND="$(jq '.scripts."test"' composer.json | sed 's/\"//g')"
fi

if [ "$COMMAND" != "" ]; then
    if [ "$COMMAND" = "null" ]; then
        COMMAND=""
    elif [ "`echo "$COMMAND" | grepx -F "["`" != "" ]; then
        # [
        #     "@phpcs",
        #     "@phpstan",
        #     "@phpunit"
        # ]
        COMMAND=""
    elif [ "`echo "$COMMAND" | grepx "^phpunit "`" != "" ]; then
        COMMAND="phpx vendor/bin/$COMMAND"
    elif [ "`echo "$COMMAND" | grepx "^@php "`" != "" ]; then
        COMMAND="phpx $COMMAND"
    elif [ "`echo "$COMMAND" | grepx "^XDEBUG_"`" != "" ]; then
        # XDEBUG_MODE=coverage vendor/bin/phpunit
        # XDEBUG_MODE=coverage phpx vendor/bin/phpunit
        COMMAND=`echo "$COMMAND" | sed -E 's/(\w*)\s+(.*)/\1 phpx \2/g'`
    else
        COMMAND="phpx $COMMAND"
    fi
fi

if [ "$COMMAND" = "" ] && [ -f "testx.sh" ]; then
    COMMAND="sh testx.sh"
elif [ "$COMMAND" = "" ]; then
    COMMAND="phpx vendor/bin/phpunit --stop-on-failure --no-coverage"
fi

if [ "`echo "$COMMAND" | grepx -F "memory_limit"`" != "" ]; then
    # Break your limits!
    COMMAND=$(echo "$COMMAND" | sed 's/-d memory_limit=[0-9]*[M|G][[:space:]]\?//')
fi

if [ "`echo "$COMMAND" | grepx -F -- "--no-coverage"`" = "" ]; then
    # In PHPUnit 10+ avoid WARNING (finish with status code: 1)
    #   No code coverage driver is available
    COMMAND="$COMMAND --no-coverage"
fi

# Debugging command
echo $COMMAND
# exit 1

# XDEBUG_MODE=off vendor/bin/pest
sh -c "$COMMAND"
