# dd 2024-11-02
# dd 2024-11-02 2024-11-20
dd() {
    if [ "$1" = "" ]; then
        echo "\e[31mDate from is required!\e[0m"

        return 1
    fi

    phpx --run "echo (date_diff(date_create('$1 America/Bogota'), date_create('${2-`date -u +%Y%m%d%H%M%S`} America/Bogota')))->format('%a day %H:%I:%S') . \"\n\";"
}

# @see https://bohner.me/posts/fixingsshlogintimes/
# trace 8056
# trace $(pgrep -f ssh)
trace() {
    if [ "$1" = "" ]; then
        echo "\e[31mPID is required!\e[0m"

        return 1
    fi

    if [ ! -d /tmp/straces/ ]; then
        mkdir /tmp/straces
        chmod 774 /tmp/straces -Rf
    fi

    # strace use stderr for outputs by default
    sudo strace -rTfp $1 2>&1 | tee /tmp/straces/$1.log

    echo Trace: /tmp/straces/$1.log
}

saU() {
    echo "\e[34mEnabling packages...\e[0m"
    sudo sed -i 's/Enabled: no/Enabled: yes/g' /etc/apt/sources.list.d/*

    checkcode $?

    echo "\e[34mUpdating packages...\e[0m"
    sau

    checkcode $?

    echo "\e[34mDisabling packages...\e[0m"
    sudo sed -i 's/Enabled: yes/Enabled: no/g' /etc/apt/sources.list.d/*

    checkcode $?

    echo "\e[34mUpdating firefox...\e[0m"
    curl -L "https://download.mozilla.org/?product=firefox-devedition-latest-ssl&os=linux64&lang=en-US" -o firefox.tar.xz && sudo tar xvf firefox.tar.xz -C /opt && rm -Rf firefox.tar.xz

    checkcode $?

    echo "\e[34mUpdating zen...\e[0m"
    curl -L "https://github.com/zen-browser/desktop/releases/download/twilight/zen.linux-x86_64.tar.xz" -o zen.tar.xz && sudo tar xvf zen.tar.xz -C /opt && rm -Rf zen.tar.xz

    checkcode $?

    echo "\e[34mPulling docker images...\e[0m"
    sh ~/working/dockerpull.sh

    checkcode $?

    echo "\e[34mBuiding containers...\e[0m"
    sh ~/working/dockerbuild.sh

    checkcode $?

    echo "\e[34mDocker cleanup...\e[0m"
    dclean
}

checkcode() {
    if [ "$1" -ne 0 ]; then
        echo "\e[31mCommand return code: $1.\e[0m"

        return $1
    fi

    return $1
}

# cj test.csv
# cj test.csv > test.json
cj() {
    if [ "$1" = "" ]; then
        echo "\e[31mCSV file is required!\e[0m"

        return 1
    fi

    mlr --icsv --ojson tail -n 2 "$1"
}

timeshell() {
    shell=${1-$SHELL}

    for i in $(seq 1 10);
    do
        /usr/bin/time $shell -i -c exit;
    done
}

nn() {
    message="$@"

    if [ "$message" = "" ]; then
        message="Ran"
    fi

    # @see https://i3wm.org/docs/userguide.html#exec_quoting
    # Escape comma (,) and semicolon (;)
    message=`echo "$message" | sed -r 's/,/┌/g'`
    message=`echo "$message" | sed -r 's/;/¦/g'`

    i3-msg --quiet "exec i3-nagbar --type warning --font 'pango:fira code retina' --message '$message'"
}

vv() {
    if [ "$EDITOR" = "nvim" ]; then
        vim "$@"

        return $?
    fi

    nvim "$@"
}

cat() {
    if [ "`command -v bat`" != "" ]; then
        command bat --paging=never --style=changes "$@"

        return $?
    fi

    command cat "$@"
}

# Dynamic Docker Run (based in current path):
#   - drun db bash
drun() {
    docker exec -w `pwd` -it "$@"

    return $?
}

# OpenSSL PEM:
#   - osp duckduck.com:443
osp() {
    openssl s_client -connect "$@" -showcerts </dev/null | openssl x509 -outform pem > "$@".pem

    return $?
}

# OpenSSL Body:
#   - osb duckduck.com:443.pem
osb() {
    sed '1d;/^\s.*/d' "$@" > body.txt
    STATUS="$?"

    if [ $STATUS -ne 0 ]; then
        rm -f body.txt

        return $STATUS
    fi

    cat body.txt | yy | rm body.txt

    return $?
}

# OpenSSL Private Key:
#   - osi duckduck.com:443.pem
osi() {
    openssl pkey -in "$@" -out pkey.txt
    STATUS="$?"

    if [ $STATUS -ne 0 ]; then
        rm -f pkey.txt

        return $STATUS
    fi

    cat pkey.txt | yy | rm pkey.txt

    return $?
}

# PHP Check Syntax:
#   - pcs
#   - pcs 7.4
pcs() {
    phplint $(command ls -1 -d */ | grepx -v 'vendor|node_modules|.git' | xargs -I {} echo -n ' {}') "$@"

    return $?
}

# Change Dir Project
#   - cdp /var/www/html/flexphp
cdp() {
    cd "$@"/$(cd "$@" && command ls -L1 | fzf) && $EDITOR

    return $?
}

# Change Terminal Theme
#   - ctm Light
ctt() {
    if [ "$1" = "Dark" ] ; then
        export BAT_THEME='gruvbox-dark'
        sed -i 's/BAT_THEME="gruvbox-light"/BAT_THEME="gruvbox-dark"/g' ~/.profile
    else
        export BAT_THEME="gruvbox-light"
        sed -i 's/BAT_THEME="gruvbox-dark"/BAT_THEME="gruvbox-light"/g' ~/.profile
    fi

    # Konsole
    sed -i "s/ColorScheme=.*/ColorScheme=${1}/g" /var/www/html/freddiegar/services/emulator/konsole/konsole.profile

    if [ "`command -v konsoleprofile`" != "" ]; then
        konsoleprofile colors=$1
    fi

    # URxvt
    if [ -f ~/.Xresources ]; then
        rm -f ~/.Xresources ~/.Xdefaults

        ln -s /var/www/html/freddiegar/services/emulator/urxvt/$1.Xresources ~/.Xresources
        ln -s /var/www/html/freddiegar/services/emulator/urxvt/$1.Xresources ~/.Xdefaults

        xrdb ~/.Xresources

        killall -SIGHUP urxvt
    fi

    # Alacritty
    if [ -f ~/.config/alacritty/alacritty.toml ]; then
        rm -f ~/.config/alacritty/alacritty.toml
        ln -s /var/www/html/freddiegar/services/emulator/alacritty/$1.alacritty.toml ~/.config/alacritty/alacritty.toml
    fi
}

# Init git repository to use worktree strategy
#   - gwi git@github.com:freddiegar/services
#   - gwi git@github.com:freddiegar/services ro-services
# @thanks https://morgan.cugerone.com/blog/how-to-use-git-worktree-and-in-a-clean-way/
# @thanks https://morgan.cugerone.com/blog/workarounds-to-git-worktree-using-bare-repository-and-cannot-fetch-remote-branches/
gwi() {
    PWD=`pwd`
    BASENAME=${1##*/}
    NAME=${2:-${BASENAME%.*}}

    if [ -d $PWD/$NAME ]; then
        echo "\e[31mRepository [$NAME] exists!\e[0m"

        return 1
    fi

    mkdir $PWD/$NAME

    cd $PWD/$NAME

    git clone --bare "$1" $PWD/$NAME/.bare

    echo "gitdir: $PWD/$NAME/.bare" $PWD/$NAME/.git

    cd $PWD/$NAME/.bare

    git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"

    cd $PWD/$NAME
}

# Git worktree branch
#   - gwb hotfix master
gwb() {
    ORIGIN=${2:-${1}}

    gwa $1 $ORIGIN
}

# Git worktree add
#   - gwa master
gwa() {
    ORIGIN=${2:-${1}}

    git worktree add .bare/branches/$1 $ORIGIN

    if [ "$?" -ne 0 ]; then
        return 1
    fi

    if [ -f `pwd`/.env ]; then
        ln `pwd`/.env `pwd`/.bare/branches/$1/.env
    fi

    if [ -f `pwd`/.env.testing ]; then
        ln `pwd`/.env.testing `pwd`/.bare/branches/$1/.env.testing
    fi

    if [ ! -d `pwd`/current ]; then
        gwc $1
    fi
}

# Git worktree remove
#   - gwa master
gwr() {
    if [ ! -d "`pwd`/.bare" ]; then
        echo "\e[31mMove to root directory!\e[0m"

        return 1
    fi

    git worktree remove `pwd`/.bare/branches/$1
}

# Git worktree change|current to
#   - gwc master
gwc() {
    if [ ! -d "`pwd`/.bare" ]; then
        echo "\e[31mMove to root directory!\e[0m"

        return 1
    fi

    if [ ! -d "`pwd`/.bare/branches/$1" ]; then
        echo "\e[31mBranch $1 doesn't exists!\e[0m"

        return 1
    fi

    rm -f `pwd`/current

    ln -s `pwd`/.bare/branches/$1 `pwd`/current

    chown $USER:www-data `pwd`/current -Rf
}

alias \?="apropos"
alias a="alias"
alias b="sh ~/working/mysqlramdisk.sh"
# alias [c]omposer
alias d="diff"
alias e=$EDITOR
alias f="fzf"
alias g="grepx"
alias h="sh ~/working/mysqlschema.sh"
alias i="ping 8.8.8.8 -c 100"
alias l="less"
alias m="man"
alias n="neovide"
alias o="xargs -t -r -I {}"
alias p="ps -fea -U \$USER -u \$USER --forest"
alias q="bash ~/working/evertec/queues.sh"
alias r="sh ~/working/mysqlget.sh"
alias s="bash ~/working/mysqlog.sh"
alias t="sh testx.sh"
alias u="cd /var/www/html/universal-ctags/ctags && git clean -f -d && git pull origin master && ./autogen.sh && ./configure && make && sudo make install && cd -1"
alias v=$EDITOR
alias w="watch -n0.5 -t --color"
alias x="exit"
alias y="sh ~/working/syntaxer.sh"
alias z="sh ~/working/sprinter.sh"

alias O="xargs -r -I {}"
# @thanks https://stackoverflow.com/a/4509648
alias W="find /var/www/html/{evertec,flexphp,freddiegar} -mindepth 1 -maxdepth 1 -type d | fzf | O -- sh ~/.config/i3/workspace {} 2>&1 > /dev/null"

# SPA
alias ww="[ \"\`pgrep --full 'npm run dev --host'\`\" = \"\" ] && sh -c 'cd /var/www/html/evertec/webcheckout-spa && npm run dev -- --host > /dev/null 2>&1 &' && echo '\e[32mStarted\e[0m SPA'"
alias wk="pkill --newest --signal 9 --full 'npm run dev --host' && echo '\e[31mStopped\e[0m SPA' &&  PIDTOKILL=\`sudo lsof -i :3000 | grepx 3000 | awk '{print \$2}'\` && if [ \"\$PIDTOKILL\" != \"\" ]; then kill -9 \$PIDTOKILL; echo \"\e[31mKilled \$PIDTOKILL\e[0m\"; fi"

# @thanks https://rafaelc.org/posts/copying-previous-commands-with-fzf-and-zsh/
alias hh="fc -ln 0 | awk '!a[\$0]++' | fzf --tac | tr -d \"\n\" | xclip -selection clipboard"
alias ht="history | grepx -v '  (_|sudo|echo|php|ls) ' | awk '{print \$4}' | sort | uniq -c | sort -nr | head -10"
# di dir1 dir2 > dirs.diff
alias di="diff -rq --suppress-common-lines"
# alias ll="command ls -lh"
# alias lg="exa --git"
alias le="find . -size 0 | grepx -v 'ignore|node_modules|vendor|storage|coverage|.git/'"
# lsd | awk '{print $9}' | o sh -c "cd {} && if [ -d .git ] ; then git fetch --all --prune; fi && cd .."
# lsd | awk '{print $9}' | o sh -c "cd {} && if [ -d .git ] ; then git gc --prune=now; fi && cd .."
# lsd | awk '{print $9}' | o sh -c "cd {} && if [ -d .git ] ; then git checkout master || git checkout main; fi && cd .."
# lsd | awk '{print $9}' | o sh -c "cd {} && if [ -d .git ] ; then git pull origin master || git pull origin main; fi && cd .."
# lsd | awk '{print $9}' | o sh -c "cd {} && if [ -f composer.json ] && [ -f composer.lock ] ; then phpx `which composer` install -vvv; fi && cd .."
# lsd | awk '{print $9}' | o sh -c "cd {} && if [ -f package.json ] && [ -f package-lock.json ] ; then npm ci; fi && cd .."
# lsd | awk '{print $9}' | o sh -c "cd {} && if [ -f artisan ] && [ -f .env ] && [ -d vendor ]; then phpx artisan migrate --force; fi && cd .."
# lsd | awk '{print $9}' | o sh -c "cd {} && if [ -f yii ] && [ -f .env ] && [ -d vendor ] ; then export APPLICATION_ENV=dev && phpx yii migrate/up; fi && cd .."
alias lsd="command ls -lA | grepx '^d'"
alias lsn="command ls -L1"
alias __="ssh-add"
# @thanks https://unix.stackexchange.com/a/90869
# ssh-add -l: List identities register
alias ___="trap '(test -z "\$SSH_AUTH_SOCK" -o ! -e "\$SSH_AUTH_SOCK") && eval \`/usr/bin/ssh-agent -k\`' 0"
alias rga="rg --no-ignore --hidden --glob '!{.git,*.log,*-lock.json,*.lock,var/*,storage/*,node_modules/*,*/var/*,*/storage/*,*/node_modules/*}'"
alias npkg="dpkg --list | wc --lines"

alias kd="ctt Dark"
alias kl="ctt Light"

alias vf="vifm"
alias vd="$EDITOR -d"
alias vn="$EDITOR -u NONE -c 'set nowrap lazyredraw noswapfile noruler noshowmode noshowcmd wildmenu pumheight=10 autoread autowrite shortmess=aWFAIcsTt undolevels=0'"
alias vc="$EDITOR ~/.vimrc"
alias vz="$EDITOR ~/.zshrc"
alias vs="$EDITOR slide*.vpm"
alias va="$EDITOR ~/.bash_aliases"
alias vh="$EDITOR ~/.zsh_history"
alias v3="$EDITOR ~/.config/i3/config"
alias vl="$EDITOR -c \"set background=light\""

alias rz="exec zsh"
alias ra="source ~/.bash_aliases"
alias r3="i3-msg 'restart'"

alias sas="sudo apt-cache search"
alias sad="sudo apt-cache show"
alias sai="sudo apt-get install -y"
alias sar="sudo apt-get remove -y"
alias sau="sudo apt-get update && sudo apt-get upgrade -y && sac"
alias sac="sudo apt-get autoremove --purge -y && sudo apt-get clean -y && sudo apt-get autoclean -y"
alias sap="dpkg -l | grepx ^rc | grepx -v grub | awk '{print \$2}' | xargs -t sudo apt-get -y purge"
alias say="sudo apt policy"

alias xpa='echo "\n" | sudo add-apt-repository'
alias xpr='echo "\n" | sudo add-apt-repository --remove'

alias c="phpx `which composer`"
alias c1="phpx `which composer_v1`"
alias ci="phpx `which composer` -vvv install"
alias cu="phpx `which composer` -vvv update"
alias cda="phpx `which composer` -vvv dump-autoload --optimize"
alias cii="phpx `which composer` -vvv install --ignore-platform-reqs"
alias cui="phpx `which composer` -vvv update --ignore-platform-reqs"
alias cip="phpx `which composer` -vvv install --no-dev"
alias cin="phpx `which composer` -vvv install --no-cache"
alias cipn="phpx `which composer` -vvv install --no-dev --no-cache"

alias pps="phpx bin/console"
alias ccs="sudo chmod 770 -Rf var                       && sudo chown $USER:www-data -Rf var                      && pps cache:clear"
alias ccm="sudo chmod 770 -Rf var                       && sudo chown $USER:www-data -Rf var                                                && gco var"

alias ppa="phpx artisan"
alias ppw="sudo -u www-data phpx artisan"
alias ccl="sudo chmod 770 -Rf storage bootstrap/cache   && sudo chown $USER:www-data -Rf storage bootstrap/cache  && ppa optimize:clear     && gco storage bootstrap"

alias ppv='ppa app-version:create --sha="$(git rev-parse HEAD)" --time="$(date -u +%Y%m%d%H%M%S)" --branch="$(git rev-parse --abbrev-ref HEAD)"'
alias ppy="export APPLICATION_ENV=dev && phpx yii"
alias ccy="sudo chmod 770 -Rf runtime web/assets        && sudo chown $USER:www-data -Rf runtime web/assets       && ppy cache/flush-all"

alias pex="sudo phpenmod xdebug"
alias pdx="sudo phpdismod xdebug"
alias prx='export XDEBUG_SESSION=1 && export XDEBUG_CONFIG="idekey=PHPSTORM" && phpx'
alias psw="sudo update-alternatives --config php"

# @see https://xdebug.org/docs/all_settings#mode
alias vt="export XDEBUG_MODE=off       && phpx vendor/bin/phpunit --stop-on-failure --stop-on-error --no-coverage && nn 'Ran tests successfully!'"
alias vtc="export XDEBUG_MODE=coverage && phpx vendor/bin/phpunit --stop-on-failure --stop-on-error --no-coverage && nn 'Ran tests successfully with coverage!'"
alias vT="phpx vendor/bin/phpunit --testdox"
alias vts="phpx vendor/bin/phpunit --stop-on-failure --stop-on-error --no-coverage --testsuite"
alias vtS="phpx vendor/bin/phpunit --testdox --testsuite"
alias vtf="phpx vendor/bin/phpunit --stop-on-failure --stop-on-error --no-coverage --filter"

alias vp="phpx vendor/bin/paratest --stop-on-failure --stop-on-error --no-coverage"
alias vP="phpx vendor/bin/paratest --testdox"
alias vps="phpx vendor/bin/paratest --stop-on-failure --stop-on-error --no-coverage --testsuite"
alias vpS="phpx vendor/bin/paratest --testdox --testsuite"
alias vpf="phpx vendor/bin/paratest --stop-on-failure --stop-on-error --no-coverage --filter"

alias st="phpx bin/phpunit --stop-on-failure --stop-on-error --no-coverage"
alias sT="phpx bin/phpunit --testdox"
alias sts="phpx bin/phpunit --stop-on-failure --stop-on-error --no-coverage --testsuite"
alias stS="phpx bin/phpunit --testdox --testsuite"
alias stf="phpx bin/phpunit --stop-on-failure --stop-on-error --no-coverage --filter"

vapor() {
    if [ -f vendor/bin/vapor ]; then
        phpx vendor/bin/vapor "$@"

        return $?
    fi

    echo "\e[90mEmpty Vapor local, using global as fallback.\e[0m"

    sleep 1

    ~/.config/composer/vendor/bin/vapor "$@"
}

alias ducks="du -cks * | sort -rn | head"
alias fo="/opt/zen/zen --new-tab"

alias dexec="docker exec -it"
alias dlogs="docker logs --tail 50 -f"
alias dstart="docker start"
alias dstop="docker stop"
alias dstatus="docker ps --format \"{{.Names}}\" | sort"
alias dprune="docker system prune -a"
alias dstats="docker stats"
alias dclean="dcclean && diclean"
alias diclean="docker images | grepx ' <none> ' | awk '{print \$3}' | xargs -r -I {} docker rmi -f {} && echo 'Images cleaned'"
alias dcclean="docker ps -a | grepx ' Exited (1) ' | awk '{print \$1}' | xargs -r -I {} docker rm  -f {} && echo 'Containers cleaned'"

alias gs="git summary -q 2> /dev/null"
alias gsa="git summary 2> /dev/null"
alias gf="onefetch --number-of-authors 10 --number-of-file-churns 5 --no-bots --no-merges --no-color-palette"
alias gv="gs | grepx -v '/ro-|/_' | grepx ' M?v'"
alias gV="gs | grepx -v '/ro-|/_' | grepx '\^$'"
# [M]odified
alias gM="gs | grepx -v '/ro-|/_' | grepx 'M'"
# [N]ew
alias gN="gs | grepx -v '/ro-|/_' | grepx '\?'"
alias gi="git init"
alias gt="git tag"
alias gth="git rev-list -n 1"
alias gst="git status"
alias gsts="git status --short"
alias gls="git ls-files"
# List [m]odified traked files
alias glsm="git ls-files --modified"
# List [d]eleted traked files
alias glsd="git ls-files --deleted"
# List ALL untraked files
alias glso="git ls-files --others"
# List ALL untraked files ignoring default exclusions: *.log
alias glsu="git ls-files --others --exclude-standard"
# List [f]ull path (usable in directory diferent to root directory)
alias glsf="git ls-files --full-name"
# List [s]taged files
alias glss="git diff --name-only --cached | xargs -r -l echo"
# List [a]ssumed unchanged files
alias glsa="git ls-files -v | rg '^h ' | awk '{print \$2}'"
# List [c]hanges (new/modified/deleted) files
alias glsc="git status --porcelain | awk '{print \$2}'"

alias gd="git diff --ignore-space-change --ignore-all-space"
alias gda="git diff"
# Example option: --word-diff"
# - version "0.8.39"
# + version "0.8.57"
# version [-"0.8.39"-]{+"0.8.57"+}
alias gdd="git diff --ignore-space-change --ignore-all-space --word-diff"
alias gdda="git diff --word-diff"
alias gdc="git diff --ignore-space-change --ignore-all-space --cached"
alias gddc="git diff --ignore-space-change --ignore-all-space --cached --word-diff"
alias gdca="git diff --cached"
alias gddca="git diff --cached --word-diff"
alias gdi="git diff --ignore-space-change --ignore-all-space --ignore-blank-lines --ignore-matching-lines '^(\s+)?[\/\*].*'"
alias gdci="git diff --ignore-space-change --ignore-all-space --ignore-blank-lines --ignore-matching-lines '^(\s+)?[\/\*].*' --cached"
alias ga="git add"
alias gcm="git commit -S"
alias gcmn="git commit --no-verify -S"
alias gcmsg="git commit -S -m"
alias gcmsgn="git commit --no-verify -S -m"
alias gcmsga="git commit --amend -S -m"
alias gcmsgan="git commit --no-verify --amend -S -m"
# # Redo last commit after changes, using same message
# alias gcmsgo="git commit --no-edit -C ORIG_HEAD"
alias gl="git pull"
alias glo="git pull origin"
alias gm="git merge"
# alias gmu="git merge upstream/master"
# alias gma="git merge --abort"
# alias gmc="git merge --continue"
alias gp="git push"
alias gpo="git push origin"
# alias gpt="git push --tags"
# alias gptd="git push --delete origin"
# Whoops git pull and push revert rescue!
alias glw="git reset --keep HEAD@{1}"
# Undo last (HEAD^) commit keeping (--soft) changes
alias gpw="git reset --soft HEAD^"
# alias gpa="git push --all"
# List branch local
alias gb="git branch"
# Branch local [c]leanup
alias gbc="git branch --merged | grepx -i -v '(^\*|master|main|develop)' | xargs -r git branch -d"
# List branch [r]emote
alias gbr="git branch -r --merged | grepx -i -v '(^\*|master|main|develop|release)' | cut -d/ -f2- | xargs -r -n 1 echo"
# Branch [c]leanup [r]emote
alias gbcr="git branch -r --merged | grepx -v '(^\*|master|main|develop|release)' | cut -d/ -f2- | xargs -r -n 1 git push --delete origin"
# Branch [n]ew
alias gbn="git checkout master && git branch -M master && git push -u origin master"
# Branch copy name
alias gbb="git rev-parse --abbrev-ref HEAD | tr -d '\n' | yy"
# Run [g]arbage [c]ollector
alias ggc="git gc --prune=now"
# Database [f]ile[s] check
alias gck="git fsck --full --progress"
# Repository [f]i[x]
alias gfx="ggc && gck"
alias gfa="git fetch --all --prune"
# alias gfu="git fetch upstream"
alias gco="git checkout"
alias gcp="git cherry-pick"
alias gcP="git cherry-pick --no-commit"
# alias gcob="git checkout -b"
# alias gcot="git checkout version"

alias gsh="git stash"
# Stash untraking files (new)
alias gsH="git stash --all"
# alias gshp="git stash -p"
alias gsl="git stash list"
alias gsp="git stash pop"
alias gsb="git stash branch"
alias gss="git stash show"
# alias gsv="git stash save"

# Unstage files
alias grh="git reset HEAD"

alias gw="git worktree"
alias gwl="git worktree list"

# WARNING!: Overwrite local history with remote history
#   > Use ONLY when remote branch diverge of local branch
# @thanks https://stackoverflow.com/a/9589927/15601185
alias gfr="git reset --hard HEAD && git fetch --all && git reset --hard FETCH_HEAD && git clean -df"

# alias gff="git flow init -d"
# alias gffs="git flow feature start"
# alias gfff="git flow feature finish"
# alias gfbs="git flow bugfix start"
# alias gfbf="git flow bugfix finish"
# alias gfhs="git flow hotfix start"
# alias gfhf="git flow hotfix finish"
# alias gfrs="git flow release start"
# alias gfrf="git flow release finish"

alias gr="git rebase"
# On conflicts with rebase is hard mode!
alias grl="git pull --rebase origin"
alias gri="git rebase --interactive"
# alias grc="git rebase --continue"
# alias gra="git rebase --abort"

# @see https://git-scm.com/docs/git-log#_pretty_formats
alias glog="git log --graph --abbrev-commit --pretty=format:'%C(red)%h%C(reset) -%C(yellow)%d%C(reset) %s %C(green)(%ar) %C(bold blue)<%aN>%C(reset)'"
alias glop="glog -p"
alias gloz="git log --reverse --pretty=format:'%s' | fzf --tac | tr -d \"\n\" | xclip -selection clipboard"
# export _GIT_SINCE="2024-01-01"
# export _GIT_UNTIL="2024-01-31"
# export _GIT_AUTHOR="Freddie Gar"
# -Y: ear, -m:onths, -W: eekdays -d: ays, -a: uthors, -C: ontributors, -A: hours
alias gloq="git-quick-stats"
alias glod="git log --graph --abbrev-commit --pretty=format:'%C(red)%h%C(reset) -%C(yellow)%d%C(reset) %s %C(green)(%as: %ar) %C(bold blue)<%aN>%C(reset)' --no-merges --since=\"\$_GIT_SINCE\" --until=\"\$_GIT_UNTIL\""
alias gloa="glod --author=\"\$_GIT_AUTHOR\""
alias gloh="git shortlog -n --no-merges --since=\"\$_GIT_SINCE\" --until=\"\$_GIT_UNTIL\" --author=\"\$_GIT_AUTHOR\""
alias gloo="git --no-pager log --pretty=format:'%aN <%ae>' --since=`date -d \"$(date +%Y-%m-01) -3 month\" +%Y-%m-%d` --until=`date -d \"$(date +%Y-%m-01) +1 month -1 day\" +%Y-%m-%d` | sort | uniq"
alias glol="git show --name-only"
alias glof="git log --decorate=full --pretty=full --graph -b --stat"
alias glos="git log --show-signature"

alias gconf="git config --list"

# Connect: osc duckduck.com:443
alias osc="openssl s_client -brief -connect"
# osd duckduck.com.443.pem
alias osd="openssl x509 -noout -text -in"
# osx duckduck.com.443.pem
alias osx="openssl x509 -noout -dates -in"
# Check expirations in seconds 60*60*24*30 -> 2592000 (1 month)
# osv duckduck.com.443.pem
alias osv="openssl x509 -noout -checkend 2592000 -in"

alias cdh="cd /var/www/html"
alias cdt="cd /var/www/html/ataringenieria"
alias cde="cd /var/www/html/evertec"
alias cdx="cd /var/www/html/flexphp"
alias cdf="cd /var/www/html/freddiegar"

alias vdt="cdp /var/www/html/ataringenieria"
alias vde="cdp /var/www/html/evertec"
alias vdx="cdp /var/www/html/flexphp"
alias vdf="cdp /var/www/html/freddiegar"

alias cdd="cd /home/$USER/Downloads"

# wr source dest
alias wr="convert -resize `xdpyinfo | awk '/dimensions/ {print $2}'`"
alias wh="convert -resize 1920x1080"
alias yy="xclip -selection clipboard"
alias pp="xclip -selection clipboard -o"
alias nw="nmcli device wifi show-password"

alias ft="ffplay -autoexit -nostats -nodisp -vn -sn -hide_banner --"
alias ff="command ls -L1 | while read file; do ffplay -autoexit -nostats -nodisp -vn -sn -hide_banner -- \$file; done"
alias fa="find . -type f -print | shuf | while read file; do ffplay -autoexit -nostats -nodisp -vn -sn -hide_banner -- \$file; done"
alias fj="pkill ffplay"
alias fn="ps -fea | g ffplay | g -F hide_banner | sed 's#^.*-- ##g'"
# fd <url>
alias fd="cd /home/$USER/Music && python3 /usr/local/bin/youtube-dl --ignore-errors --yes-playlist --yes-playlist --extract-audio -o '%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s'"
# fm 09 <url>
alias fm="fd --playlist-items"
alias fu="python3 /usr/local/bin/youtube-dl -U"

# Last command BUT as sudo, need simple quotes!
# @see https://unix.stackexchange.com/a/158480
# alias pls='sudo $(fc -ln -1)'

# Expand alias after sudo
# @see https://stackoverflow.com/a/37210013
# alias sudo="sudo "
