# :h UltiSnips-snippet-options

global !p
# @see https://www.sirver.net/blog/2012/03/31/fourth-episode-of-ultisnips-screencast/
def autocomplete(t, options):
	if t:
		options =  [ m[len(t):] for m in options if m.startswith(t) ]
	if len(options) == 1:
		return options[0]

	return '|'.join(options)

def proptypes():
	return ['string', 'int', 'bool', 'float', 'DateTimeInterface', 'array']

def returntypes():
	return proptypes() + ['void']

def functypes():
	return ['public', 'protected', 'private']
endglobal

snippet ns "Set namespace"
namespace `!v sniphpets#namespace()`;
endsnippet

snippet nm "Namespace modified"
`!v sniphpets#namespace()`;
endsnippet

snippet nn "Get file name"
`!v sniphpets#basename()`
endsnippet

snippet pp "Define Property" b
$1`!p snip.rv=autocomplete(t[1], functypes())` $2`!p snip.rv=autocomplete(t[2], proptypes())` $$0;
endsnippet

snippet pc "Define Construct Property" b
$this->$1 = $$1;$0
endsnippet

snippet pt "Define Test Property" b
$$1 = '::$1::';$0
endsnippet

snippet pf "Define Fake Property" i
'::$1::'$0
endsnippet

snippet ps "Define String Property" i
$$1 = '$2';$0
endsnippet

snippet pn "Define Null Property" i
$$1 = null;
endsnippet

snippet "p(0|1)" "Define False|True Property" ir
$$1 = `!p snip.rv='false' if match.group(1) == '0' else 'true'`;
endsnippet

snippet py "Define Array Property" i
$$1 = [$2];$0
endsnippet

snippet pi "Define Instance Property" i
$$1 = new $2($3);$0
endsnippet

snippet px "Define Extended Property" i
$$1->$2($3);$0
endsnippet

snippet pd "Define Date Property" i
$$1 = new DateTime($2);$0
endsnippet

snippet pa "Define Assert Property" b
$this->assertEquals($$1, $$2->$1());$0
endsnippet

snippet pas "Define Assert Same Property" b
$this->assertSame($$1, $$2->$1());$0
endsnippet

snippet pan "Define Assert Null Property" b
$this->assertNull($$1->$2());$0
endsnippet

snippet fis "Function Interface Set" b
public function set${1/^([a-z]){1}/\u$1/}($3$2`!p snip.rv=autocomplete(t[2], proptypes())` $$1): void;
endsnippet

snippet fig "Function Interface Get" b
public function $1(): $3$2`!p snip.rv=autocomplete(t[2], proptypes())`;
endsnippet

snippet fic "Function Interface Construct" b
public function __construct($0);
endsnippet

snippet fix "Function Interface X" b
public function $1($2): $3`!p snip.rv=autocomplete(t[3], returntypes())`;
endsnippet

snippet fif "Function Interface Full" b
public function $1(): $2`!p snip.rv=autocomplete(t[2], proptypes())`;

public function set${1/^([a-z]){1}/\u$1/}($2 $$1): void;
endsnippet

snippet ffs "Setter Function" b
public function set${1/^([a-z]){1}/\u$1/}($2`!p snip.rv=autocomplete(t[2], proptypes())` $$1): void
{
    $this->$1 = $$1;
}$0
endsnippet

snippet ffg "Getter Function" b
public function $1(): $2`!p snip.rv=autocomplete(t[2], proptypes())`
{
    return $this->$1;
}$0
endsnippet

snippet ffc "Function Construct" b
public function __construct($1 $$2$3)
{
    $this->$2 = $$2;$0
}
endsnippet

snippet ffx "Function X" b
$1`!p snip.rv=autocomplete(t[1], functypes())` function $2($3): $4`!p snip.rv=autocomplete(t[4], returntypes())`
{
    $0
}
endsnippet

snippet fff "Function Full" b
$3`!p snip.rv=autocomplete(t[3], functypes())` $2 $$1;

public function $1(): $2
{
    return $this->$1;
}

public function set${1/^([a-z]){1}/\u$1/}($2 $$1): void
{
    $this->$1 = $$1;
}$0
endsnippet

snippet fft "Function Test" b
public function test$1($2): void
{
    $0
}
endsnippet

snippet ffp "Use Data Provider" b
/**
 * @dataProvider get$0
 */
endsnippet

snippet ffd "Function Data Provider" b
public function get$1(): array
{
    return [
        [$0],
    ];
}
endsnippet

snippet rfg "Return For Getter"
return $this->`!v sniphpets#method()`;
endsnippet

snippet rfs "Return For Setter"
$this->`!v sniphpets#lcfirst(substitute(sniphpets#method(), 'set', '', ''))` = $`!v sniphpets#lcfirst(substitute(sniphpets#method(), 'set', '', ''))`;
endsnippet

snippet di "Die"
die(var_dump([$$1, __FILE__ . ':' . __LINE__]));
endsnippet

snippet dI "Die"
die(var_dump([__FILE__ . ':' . __LINE__]));
endsnippet

snippet dv "Dump"
var_dump([$$1, __FILE__ . ':' . __LINE__]);
endsnippet

snippet de "Dump Exception"
die(var_dump([array_filter(explode("\n",(new \Exception())->getTraceAsString()),function($l){if(strpos($l,'vendor')===false){return $l;}}), __FILE__ . ':' . __LINE__]));
endsnippet

snippet dl "Debug Log"
logger()->debug(__FILE__ . ':' . __LINE__$1);
endsnippet

snippet df "Debug File"
file_put_contents('${1:/var/www/html/logs/temporal.log}', date('c') . ' ' . __FILE__ . ':' . __LINE__ .$2 "\n", FILE_APPEND);$0
endsnippet

snippet dq "Debug Query"
file_put_contents('/var/log/mysql/mysql.log', date('c') . ' ' . __FILE__ . ':' . __LINE__ . "$1\n", FILE_APPEND);$0
endsnippet

snippet dd "Debug Die"
dd($$1, __FILE__ . ':' . __LINE__);
endsnippet

snippet dk "Debug Kill"
dd(__FILE__ . ':' . __LINE__);
endsnippet

snippet dm "Debug Message"
dd('$1', __FILE__ . ':' . __LINE__);
endsnippet

snippet du "Debug Dump"
dump($$1, __FILE__ . ':' . __LINE__);
endsnippet

snippet dt "Debug Trace"
dump(__FILE__ . ':' . __LINE__);
endsnippet

snippet dG "Debug Memory"
$_mgui = memory_get_usage();
endsnippet

snippet dg "Debug Memory"
echo ((memory_get_usage() - ($_mgui ?? 0)) / 1000000) . ' MB in ' . __FILE__ . ':' . __LINE__ . PHP_EOL;
endsnippet

snippet php "Template Class" b
<?php

$0
endsnippet

snippet [] "Array" i
[
    $1 => $0,
]
endsnippet

snippet "s(u|o|i)" "Scope" ir
`!p snip.rv='public' if match.group(1) == 'u' else ('protected' if match.group(1) == 'o' else 'private')`
endsnippet

snippet $ "This" i
$this->$0
endsnippet

snippet "tt(a|f)?c" "Template Class" br
<?php

namespace $1`!v sniphpets#namespace()`;

`!p snip.rv='abstract ' if match.group(1) == 'a' else ('final ' if match.group(1) == 'f' else '')`class `!v
sniphpets#basename()`$2
{
    ${0:${VISUAL}}
}
endsnippet

snippet tti "Template Interface" b
<?php

namespace $1`!v sniphpets#namespace()`;

interface `!v sniphpets#basename()`
{
    ${0:${VISUAL}}
}
endsnippet

snippet ttt "Template Trait" b
<?php

namespace $1`!v sniphpets#namespace()`;

trait `!v sniphpets#basename()`
{
    ${0:${VISUAL}}
}
endsnippet

snippet ttu "Template Test Unit" b
<?php

namespace $1`!v sniphpets#namespace()`;

final class `!v sniphpets#basename()` extends TestCase
{
    ${0:${VISUAL}}
}
endsnippet

snippet if "If"
if ($1) {
    ${0:${VISUAL}}
}
endsnippet

snippet else "Else"
 else {
    ${0:${VISUAL}}
}
endsnippet

snippet elif "Elseif"
 else if ($1) {
    ${0:${VISUAL}}
}
endsnippet

snippet fir "For loop"
for ($i = 0; $i ${1:<} $2; ++$i) {
    ${0:${VISUAL}}
}
endsnippet

snippet for "Foreach loop"
foreach ($1 as $1$2) {
    ${0:${VISUAL}}
}
endsnippet

snippet fas "Foreach key => val"
foreach ($1 as $${2:key} => $${3:value}) {
    ${0:${VISUAL}}
}
endsnippet

snippet "ar(f|m|r)" "Array operations" br
array_`!p snip.rv='filter' if match.group(1) == 'f' else ('map' if match.group(1) == 'm' else 'reduce')`($1)$0
endsnippet

snippet spr "Sprintf"
sprintf('$1', $0)
endsnippet

snippet try "Try/catch" b
try {
    ${1:${VISUAL}}
} catch (${1:Exception} $e) {
    $0
}
endsnippet

snippet "mt(i|s)" "Mark Test Incomplete" br
$this->markTest`!p snip.rv='Incomplete' if match.group(1) == 'i' else 'Skipped'`();$0
endsnippet

snippet eeu "Use exception" b
use $1Exception;$0
endsnippet

snippet eee "Throw a new exception" b
throw new $1Exception($2);$0
endsnippet

snippet eet "Check throw exception" b
$this->expectException($1Exception::class);
$this->expectExceptionMessage($2);$0
endsnippet
