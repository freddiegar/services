snippet sh "Shell" b
#!/bin/sh
endsnippet

snippet bash "Bash" b
#!/usr/bin/env bash
endsnippet

snippet if "If"
if [ $1 ]; then
    ${0:${VISUAL}}
fi
endsnippet

snippet else "Else"
else
    ${0:${VISUAL}}
endsnippet

snippet elif "Elseif"
elif [ $1 ]; then
    ${0:${VISUAL}}
endsnippet

snippet for "For loop"
for $1 in $2
do
    ${0:${VISUAL}}
done
endsnippet

# @see https://www.redhat.com/sysadmin/linux-shell-redirection-pipelining
# @see https://www.cyberciti.biz/faq/how-to-redirect-standard-error-in-bash/
# @see https://stackoverflow.com/a/2342841/15601185
snippet rr "Reference Redirection"
# Short
#	1 -> standard output
#	2 -> error output
#	& -> all (standard and error) output
#
# Pipes
#	echo "(keyboard) standard input - stdin"			0
#	echo "(screen) standard output - stdout"			>&1
#	echo "(screen) error output - stderr"				>&2
#	echo "ignore output and send error to rabbit hole"	2>&1 > /dev/null
#	echo "all (standard and error) output"				1>&2
#	echo "no errors at all"								2>&-
#
# Redirection with >
#     command > file:				Sends standard output to <file>
#     command 2> file:				Sends error output to <file>
#     command 1> file 2> errors:	Sends standard to <file> and error to <error>
#     command > file 2>&1:			Sends all (standard and error) output to a <file>
#
# Append with >>
#     command >> file:		Appends standard output to a <file>
#     command 2>> file:		Appends error output to a <file>
#     command >> file 2>&1:	Appends all (standard and error) input to a <file>
#
# Redirect with <
#     command < input:		Feeds a command input from <input>
#     command << input:		Feeds a command or interactive program with a list defined by a delimiter; this is known as a here-document (heredoc)
#     command <<< input:	Feeds a command with <input>; this is known as a here-string
endsnippet

# @see https://bash.cyberciti.biz/guide/Bash_special_parameters
# @see https://www.thegeekstuff.com/2010/05/bash-shell-special-parameters
snippet rp "Reference parameters"
# \$* -> Positional parameters: array $* != "$*" string								https://bash.cyberciti.biz/guide/$*
# \$@ -> Expand positional:		That is, "$@" is equivalent to "\$1" "\$2" .. "$n"	https://bash.cyberciti.biz/guide/$@
# \$# -> Number of parameters
# \$? -> Exit status last command:		0 is all OK!								https://bash.cyberciti.biz/guide/$%3F
# \$- -> Options set using set builtin command (a LOT weird)
# \$$ -> Process ID (PID)				echo $$										https://bash.cyberciti.biz/guide/$$
# \$! -> Precess ID last background:	sleep 1000 & echo $!
# \$0 -> Name script file				sh $(dirname "\$0")/../command.sh			https://bash.cyberciti.biz/guide/\$0
# \$_ -> Same params before command:	ls -la /home && echo "$_"
endsnippet

# @see https://linuxconfig.org/bash-scripting-operators
snippet ro "Reference operators"
# Arithmetic Comparison
# -lt	<
# -gt	>
# -le	<=
# -ge	>=
# -eq	==
# -ne	!=

# Arithmetic Expansion
# There are two formats $[ expression ] or $(( expression #))
# echo 4 + 5 = $((4 + 5))
# echo 7 - 7 = $[ 7 - 7 ]
# echo 4 x 6 = $((3 * 2))
# echo 6 / 3 = $((6 / 3))
# echo 8 % 7 = $((8 % 7))
# echo 2 ^ 8 = $[ 2 ** 8 ]

# String Comparison
# =		equal
# !=	not equal
# <		less then
# >		greater then
# -n s1 string s1 is not empty
# -z s1 string s1 is empty

# File Testing
# -b filename	Block special file
# -c filename	Special character file
# -d directoryname	Check for directory existence
# -e filename	Check for file existence
# -f filename	Check for regular file existence not a directory
# -G filename	Check if file exists and is owned by effective group ID.
# -g filename	true if file exists and is set-group-id.
# -k filename	Sticky bit
# -L filename	Symbolic link
# -O filename	True if file exists and is owned by the effective user id.
# -r filename	Check if file is a readable
# -S filename	Check if file is socket
# -s filename	Check if file is nonzero size
# -u filename	Check if file set-ser-id bit is set
# -w filename	Check if file is writable
# -x filename	Check if file is executable
endsnippet

# @see https://dev.to/ifenna__/adding-colors-to-bash-scripts-48g4
snippet rc "Reference colors"
# aka:
#	echo -e "\e[41mRed background\e[0m"
#	echo -e "\e[3;31mRed italic text\e[0m"

# Color       Font  Background
# blac[k]     30    40
# [r]ed       31    41
# [g]reen     32    42
# [y]ellow    33    43
# [b]lue      34    44
# [m]agenta   35    45
# [c]yan      36    46
# gr[a]y      90    100
# [w]hite     97    107

# [n]ormal          0
# b[o]ld            1
# [f]aint           2
# [i]talics         3
# [u]nderlined      4
endsnippet

snippet "f(k|r|g|y|b|m|c|a|w)" "Colors Foreground" r
\e[`!p snip.rv='30' if match.group(1) == 'k' else ('31' if match.group(1) == 'r' else ('32' if match.group(1) == 'g' else ('33' if match.group(1) == 'y' else ('34' if match.group(1) == 'b' else ('35' if match.group(1) == 'm' else ('36' if match.group(1) == 'c' else ('90' if match.group(1) == 'a' else '97')))))))`m${1:${VISUAL}}\e[0m$0
endsnippet

snippet "b(k|r|g|y|b|m|c|a|w)" "Colors Background" r
\e[`!p snip.rv='40' if match.group(1) == 'k' else ('41' if match.group(1) == 'r' else ('42' if match.group(1) == 'g' else ('43' if match.group(1) == 'y' else ('44' if match.group(1) == 'b' else ('45' if match.group(1) == 'm' else ('46' if match.group(1) == 'c' else ('100' if match.group(1) == 'a' else '107')))))))`m${1:${VISUAL}}\e[0m$0
endsnippet
